- hosts: myhost  # playbook to setup system as root
  become: true
  tasks:
    - name: Updates package lists for upgrades/new pkg, then upgrades all current packages to the latest version
      apt: upgrade=dist update_cache=yes
    - name: Install latest version of packages
      package: name="{{item}}" state=latest
      with_items:
        - python3-pip
        - python3-dev
        - virtualenv
        - git
        - nginx
        - fail2ban
        - unzip
    - name: Firewall turn on and allow OpenSSH
      ufw: rule=allow name=OpenSSH state=enabled
    - name: Firewall allow nginx https and http (for redirect to ssl)
      ufw: rule=allow name="Nginx Full"


- hosts: myhost  # playbook to install mongodb
  become: true
  tasks:
    - name: Add mongodb repo apt_key
      apt_key: keyserver=hkp://keyserver.ubuntu.com:80 id=EA312927
    - name: Add mongodb sources list
      shell: "echo 'deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse' | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list"
      changed_when: false
    - name: Update repositories cache and install "mongodb-org" package
      apt: name=mongodb-org update_cache=yes


- hosts: myhost  # playbook to install chrome, chromedriver, dependencies
  become: true
  tasks:
    - name: Add chrome repo apt_key
      shell: "wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -"
      changed_when: false
    - name: Add chrome sources list
      shell: "echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list"
      changed_when: false
    - name: Update repositories cache and install "google-chrome-stable" package
      apt: name=google-chrome-stable update_cache=yes
    - name: Install xvfb, dependency for chromedriver
      package: name=xvfb state=latest
    - name: make chromedriver directory
      file: path=/var/chromedriver state=directory
    - name: Download and unzip chromedriver
      unarchive:
        src: https://chromedriver.storage.googleapis.com/2.35/chromedriver_linux64.zip
        dest: /var/chromedriver
        remote_src: yes


- hosts: myhost  # playbook to setup code environment
  vars:
    services:
      - nginx
      - fail2ban
    newServices:
      - mongodb.service
      - media-search.service
  tasks:
    - name: Make project directory
      file: path=~/media-search/ state=directory
    - name: Git clone media-search repo
      git:
        repo: https://github.com/awcrosby/media-search.git
        dest: ~/media-search
        update: no
    - name: Create symlink for vim settings
      file:
        src: ~/media-search/config/.vimrc
        dest: ~/.vimrc
        state: link
    - name: Create virtual environment and install pip packages
      pip:
        requirements: ~/media-search/requirements.txt
        virtualenv: ~/media-search/venv
        virtualenv_site_packages: no

    - name: Check if nginx config has been changed to SSL
      lineinfile:
        dest: /etc/nginx/sites-available/default
        line: "    listen 443 ssl; # managed by Certbot"
      check_mode: yes
      register: nginx_ssl_check
    - name: Copy pre-ssl nginx config if nginx ssl letsencrypt not configured
      become: true
      copy:
        src: nginx_config_pre_ssl
        dest: /etc/nginx/sites-available/default
      when: nginx_ssl_check.changed

    - name: Copy fail2ban config
      become: true
      copy:
        src: jail.local
        dest: /etc/fail2ban/
    - name: Restart services
      become: true
      service: name="{{item}}" state=restarted
      changed_when: false
      with_items: "{{services}}"
    - name: Copy services
      become: true
      copy:
        src: "{{item}}"
        dest: /etc/systemd/system/{{item}}
      with_items: "{{newServices}}"
    - name: Start and enable on startup the services
      become: true
      service: name="{{item}}" state=started enabled=yes
      with_items: "{{newServices}}"


- hosts: myhost  # playbook to add crontab entries
  tasks:
    - name: Add crontab entry for database backups
      cron:
        name: database backups
        minute: 26
        hour: 5
        job: ~/media-search/config/mongo_bkup.sh
    - name: Add crontab entry to run scraper.py
      cron:
        name: scraper
        minute: 45
        hour: 5
        weekday: sun
        job: cd /home/ubuntu/media-search && /home/ubuntu/media-search/venv/bin/python /home/ubuntu/media-search/scraper.py


- hosts: myhost  # check password auth is off and reboot
  tasks:
    - name: Check that password auth is off
      lineinfile:
        dest: /etc/ssh/sshd_config
        line: "PasswordAuthentication no"
      check_mode: yes
      register: presence
      failed_when: presence.changed
    - name: Reboot server
      become: true
      command: reboot
